{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/xtratos/Documents/React-Developer-Nanodegree-Program/UdaciFitness/components/AddEntry.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { getMetricMetaInfo, timeToString, getDailyReminderValue } from \"../utils/helpers\";\nimport Slider from \"./Slider\";\nimport Steppers from \"./Steppers\";\nimport DateHeader from \"./DateHeader\";\nimport TextButton from \"./TextButton\";\nimport { removeEntry as _removeEntry, submitEntry } from \"../utils/api\";\nimport { connect } from 'react-redux';\nimport { addEntry, removeEntry } from \"../actions\";\n\nfunction SubmitBtn(_ref) {\n  var onPress = _ref.onPress;\n  return React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"SUBMIT\"));\n}\n\nvar AddEntry = function (_Component) {\n  _inherits(AddEntry, _Component);\n\n  var _super = _createSuper(AddEntry);\n\n  function AddEntry() {\n    var _this;\n\n    _classCallCheck(this, AddEntry);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      run: 0,\n      bike: 0,\n      swim: 0,\n      sleep: 0,\n      eat: 0\n    };\n\n    _this.increment = function (metric) {\n      var _getMetricMetaInfo = getMetricMetaInfo(metric),\n          max = _getMetricMetaInfo.max,\n          step = _getMetricMetaInfo.step;\n\n      _this.setState(function (prevState) {\n        var count = prevState[metric] + step;\n        return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, metric, count > max ? max : count));\n      });\n    };\n\n    _this.decrement = function (metric) {\n      var _getMetricMetaInfo2 = getMetricMetaInfo(metric),\n          step = _getMetricMetaInfo2.step;\n\n      _this.setState(function (prevState) {\n        var count = prevState[metric] - step;\n        return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, metric, count < 0 ? 0 : count));\n      });\n    };\n\n    _this.slide = function (metric, value) {\n      _this.setState(_defineProperty({}, metric, value));\n    };\n\n    _this.submit = function () {\n      var key = timeToString();\n      var entry = _this.state;\n\n      _this.setState(function (prevState) {\n        return Object.keys(prevState).reduce(function (newState, currKey) {\n          newState[currKey] = 0;\n          return newState;\n        }, {});\n      });\n\n      _this.props.dispatch(addEntry(_defineProperty({}, key, entry)));\n\n      submitEntry({\n        key: key,\n        entry: entry\n      });\n    };\n\n    _this.reset = function () {\n      var key = timeToString();\n\n      _this.props.dispatch(removeEntry(key));\n\n      _removeEntry(key);\n    };\n\n    return _this;\n  }\n\n  _createClass(AddEntry, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var metaInfo = getMetricMetaInfo();\n\n      if (this.props.alreadyLogged) {\n        return React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }\n        }, React.createElement(Ionicons, {\n          name: \"ios-happy-outline\",\n          size: 96,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }\n        }), React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }\n        }, \"You already logged your information for today\"), React.createElement(TextButton, {\n          onPress: this.reset,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }\n        }, \"Reset\"));\n      }\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, React.createElement(DateHeader, {\n        date: new Date().toLocaleDateString(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }), Object.keys(metaInfo).map(function (key) {\n        var _metaInfo$key = metaInfo[key],\n            getIcon = _metaInfo$key.getIcon,\n            type = _metaInfo$key.type,\n            displayName = _metaInfo$key.displayName,\n            rest = _objectWithoutProperties(_metaInfo$key, [\"getIcon\", \"type\", \"displayName\"]);\n\n        var value = _this2.state[key];\n        return React.createElement(View, {\n          key: displayName,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }\n        }, getIcon(), type === 'slider' ? React.createElement(Slider, _extends({\n          value: value,\n          onChange: function onChange(value) {\n            return _this2.slide(key, value);\n          }\n        }, rest, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 33\n          }\n        })) : React.createElement(Steppers, _extends({\n          value: value,\n          onIncrement: function onIncrement() {\n            return _this2.increment(key);\n          },\n          onDecrement: function onDecrement() {\n            return _this2.decrement(key);\n          }\n        }, rest, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 33\n          }\n        })));\n      }), React.createElement(SubmitBtn, {\n        onPress: this.submit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return AddEntry;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var key = timeToString();\n\n  var getLoggedStatus = function getLoggedStatus() {\n    if (state[key]) {\n      return true;\n    }\n  };\n\n  return {\n    alreadyLogged: getLoggedStatus()\n  };\n}\n\nexport default connect(mapStateToProps)(AddEntry);","map":{"version":3,"sources":["/home/xtratos/Documents/React-Developer-Nanodegree-Program/UdaciFitness/components/AddEntry.js"],"names":["React","Component","Ionicons","getMetricMetaInfo","timeToString","getDailyReminderValue","Slider","Steppers","DateHeader","TextButton","removeEntry","_removeEntry","submitEntry","connect","addEntry","SubmitBtn","onPress","AddEntry","state","run","bike","swim","sleep","eat","increment","metric","max","step","setState","prevState","count","decrement","slide","value","submit","key","entry","Object","keys","reduce","newState","currKey","props","dispatch","reset","metaInfo","alreadyLogged","Date","toLocaleDateString","map","getIcon","type","displayName","rest","mapStateToProps","getLoggedStatus"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,qBAA1C;AACA,OAAOC,MAAP;AACA,OAAOC,QAAP;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,SAASC,WAAW,IAAIC,YAAxB,EAAsCC,WAAtC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBJ,WAAnB;;AAEA,SAASK,SAAT,OAAgC;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAC5B,SACI,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAKH;;IAEKC,Q;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,GAAG,EAAE,CADD;AAEJC,MAAAA,IAAI,EAAE,CAFF;AAGJC,MAAAA,IAAI,EAAE,CAHF;AAIJC,MAAAA,KAAK,EAAE,CAJH;AAKJC,MAAAA,GAAG,EAAE;AALD,K;;UAQRC,S,GAAY,UAACC,MAAD,EAAY;AAAA,+BACEtB,iBAAiB,CAACsB,MAAD,CADnB;AAAA,UACZC,GADY,sBACZA,GADY;AAAA,UACPC,IADO,sBACPA,IADO;;AAGpB,YAAKC,QAAL,CAAc,UAACC,SAAD,EAAe;AACzB,YAAMC,KAAK,GAAGD,SAAS,CAACJ,MAAD,CAAT,GAAoBE,IAAlC;AAEA,+CACOE,SADP,2BAEKJ,MAFL,EAEcK,KAAK,GAAGJ,GAAR,GAAcA,GAAd,GAAoBI,KAFlC;AAIH,OAPD;AAQH,K;;UAEDC,S,GAAY,UAACN,MAAD,EAAY;AAAA,gCACHtB,iBAAiB,CAACsB,MAAD,CADd;AAAA,UACZE,IADY,uBACZA,IADY;;AAGpB,YAAKC,QAAL,CAAc,UAACC,SAAD,EAAe;AACzB,YAAMC,KAAK,GAAGD,SAAS,CAACJ,MAAD,CAAT,GAAoBE,IAAlC;AAEA,+CACOE,SADP,2BAEKJ,MAFL,EAEcK,KAAK,GAAG,CAAR,GAAY,CAAZ,GAAgBA,KAF9B;AAIH,OAPD;AAQH,K;;UAEDE,K,GAAQ,UAACP,MAAD,EAASQ,KAAT,EAAmB;AACvB,YAAKL,QAAL,qBAAgBH,MAAhB,EAAyBQ,KAAzB;AACH,K;;UAEDC,M,GAAS,YAAM;AACX,UAAMC,GAAG,GAAG/B,YAAY,EAAxB;AACA,UAAMgC,KAAK,GAAG,MAAKlB,KAAnB;;AAGA,YAAKU,QAAL,CAAc,UAACC,SAAD;AAAA,eACVQ,MAAM,CAACC,IAAP,CAAYT,SAAZ,EAAuBU,MAAvB,CAA8B,UAACC,QAAD,EAAWC,OAAX,EAAuB;AACjDD,UAAAA,QAAQ,CAACC,OAAD,CAAR,GAAoB,CAApB;AACA,iBAAOD,QAAP;AACH,SAHD,EAGG,EAHH,CADU;AAAA,OAAd;;AAQA,YAAKE,KAAL,CAAWC,QAAX,CAAoB7B,QAAQ,qBACvBqB,GADuB,EACjBC,KADiB,EAA5B;;AAOAxB,MAAAA,WAAW,CAAC;AAACuB,QAAAA,GAAG,EAAHA,GAAD;AAAMC,QAAAA,KAAK,EAALA;AAAN,OAAD,CAAX;AAGH,K;;UAEDQ,K,GAAQ,YAAM;AACV,UAAMT,GAAG,GAAG/B,YAAY,EAAxB;;AAGA,YAAKsC,KAAL,CAAWC,QAAX,CAAoBjC,WAAW,CAACyB,GAAD,CAA/B;;AAKAxB,MAAAA,YAAY,CAACwB,GAAD,CAAZ;AACH,K;;;;;;;6BAEQ;AAAA;;AACL,UAAMU,QAAQ,GAAG1C,iBAAiB,EAAlC;;AAEA,UAAI,KAAKuC,KAAL,CAAWI,aAAf,EAA8B;AAC1B,eACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AACI,UAAA,IAAI,EAAC,mBADT;AAEI,UAAA,IAAI,EAAE,EAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAKI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DALJ,EAMI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAE,KAAKF,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANJ,CADJ;AAYH;;AAED,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AACI,QAAA,IAAI,EAAG,IAAIG,IAAJ,EAAD,CAAaC,kBAAb,EADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAIKX,MAAM,CAACC,IAAP,CAAYO,QAAZ,EAAsBI,GAAtB,CAA0B,UAACd,GAAD,EAAS;AAAA,4BACgBU,QAAQ,CAACV,GAAD,CADxB;AAAA,YACxBe,OADwB,iBACxBA,OADwB;AAAA,YACfC,IADe,iBACfA,IADe;AAAA,YACTC,WADS,iBACTA,WADS;AAAA,YACOC,IADP;;AAEhC,YAAMpB,KAAK,GAAG,MAAI,CAACf,KAAL,CAAWiB,GAAX,CAAd;AAEA,eACI,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEiB,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKF,OAAO,EADZ,EAEKC,IAAI,KAAK,QAAT,GACG,oBAAC,MAAD;AACI,UAAA,KAAK,EAAElB,KADX;AAEI,UAAA,QAAQ,EAAE,kBAACA,KAAD;AAAA,mBAAW,MAAI,CAACD,KAAL,CAAWG,GAAX,EAAgBF,KAAhB,CAAX;AAAA;AAFd,WAGQoB,IAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADH,GAMG,oBAAC,QAAD;AACI,UAAA,KAAK,EAAEpB,KADX;AAEI,UAAA,WAAW,EAAE;AAAA,mBAAM,MAAI,CAACT,SAAL,CAAeW,GAAf,CAAN;AAAA,WAFjB;AAGI,UAAA,WAAW,EAAE;AAAA,mBAAM,MAAI,CAACJ,SAAL,CAAeI,GAAf,CAAN;AAAA;AAHjB,WAIQkB,IAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WARR,CADJ;AAkBH,OAtBA,CAJL,EA2BI,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAE,KAAKnB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3BJ,CADJ;AA+BH;;;;EA7HkBjC,S;;AAgIvB,SAASqD,eAAT,CAAyBpC,KAAzB,EAAgC;AAC5B,MAAMiB,GAAG,GAAG/B,YAAY,EAAxB;;AAEA,MAAMmD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,QAAIrC,KAAK,CAACiB,GAAD,CAAT,EAAgB;AACZ,aAAO,IAAP;AACH;AACJ,GAJD;;AAMA,SAAO;AACHW,IAAAA,aAAa,EAAES,eAAe;AAD3B,GAAP;AAGH;;AAED,eAAe1C,OAAO,CAACyC,eAAD,CAAP,CAAyBrC,QAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { getMetricMetaInfo, timeToString, getDailyReminderValue } from '../utils/helpers';\nimport Slider from './Slider';\nimport Steppers from './Steppers';\nimport DateHeader from './DateHeader';\nimport TextButton from './TextButton';\nimport { removeEntry as _removeEntry, submitEntry } from '../utils/api';\nimport { connect } from 'react-redux';\nimport { addEntry, removeEntry } from '../actions';\n\nfunction SubmitBtn({ onPress }) {\n    return (\n        <TouchableOpacity onPress={onPress}>\n            <Text>SUBMIT</Text>\n        </TouchableOpacity>\n    )\n}\n\nclass AddEntry extends Component {\n    state = {\n        run: 0,\n        bike: 0,\n        swim: 0,\n        sleep: 0,\n        eat: 0,\n    }\n    \n    increment = (metric) => {\n        const { max, step } = getMetricMetaInfo(metric);\n    \n        this.setState((prevState) => {\n            const count = prevState[metric] + step;\n        \n            return {\n                ...prevState,\n                [metric]: count > max ? max : count\n            }\n        });\n    }\n    \n    decrement = (metric) => {\n        const { step } = getMetricMetaInfo(metric);\n    \n        this.setState((prevState) => {\n            const count = prevState[metric] - step;\n        \n            return {\n                ...prevState,\n                [metric]: count < 0 ? 0 : count\n            }\n        });\n    }\n\n    slide = (metric, value) => {\n        this.setState({[metric]: value});\n    }\n\n    submit = () => {\n        const key = timeToString();\n        const entry = this.state;\n\n        // RESET STATE\n        this.setState((prevState)=>(\n            Object.keys(prevState).reduce((newState, currKey) => {\n                newState[currKey] = 0;\n                return newState;\n            }, {})\n        ));\n        \n        // UPDATE REDUX\n        this.props.dispatch(addEntry({\n            [key]: entry\n        }))\n\n        // NAVIGATE TO HOME\n\n        // UPDATE ASYNCSTORAGE\n        submitEntry({key, entry});\n\n        // CLEAR LOCAL NOTIFICATION\n    }\n\n    reset = () => {\n        const key = timeToString();\n\n        // UPDATE REDUX\n        this.props.dispatch(removeEntry(key));\n\n        // ROUTE TO HOME\n\n        // UPDATE ASYNCSTORAGE\n        _removeEntry(key);\n    }\n\n    render() {\n        const metaInfo = getMetricMetaInfo();\n\n        if (this.props.alreadyLogged) {\n            return (\n                <View>\n                    <Ionicons\n                        name=\"ios-happy-outline\"\n                        size={96}\n                    />\n                    <Text>You already logged your information for today</Text>\n                    <TextButton onPress={this.reset}>\n                        Reset\n                    </TextButton>\n                </View>\n            )\n        }\n\n        return (\n            <View>\n                <DateHeader\n                    date={(new Date()).toLocaleDateString()}\n                />\n                {Object.keys(metaInfo).map((key) => {\n                    const { getIcon, type, displayName, ...rest } = metaInfo[key];\n                    const value = this.state[key];\n\n                    return (\n                        <View key={displayName}>\n                            {getIcon()}\n                            {type === 'slider' ?\n                                <Slider\n                                    value={value}\n                                    onChange={(value) => this.slide(key, value)}\n                                    {...rest}\n                                /> :\n                                <Steppers\n                                    value={value}\n                                    onIncrement={() => this.increment(key)}\n                                    onDecrement={() => this.decrement(key)}\n                                    {...rest}\n                                />\n                            }\n                        </View>\n                    )\n                })}\n                <SubmitBtn onPress={this.submit} />\n            </View>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    const key = timeToString();\n\n    const getLoggedStatus = () => {\n        if (state[key]) {\n            return true;\n        }\n    }\n\n    return {\n        alreadyLogged: getLoggedStatus()\n    }\n}\n\nexport default connect(mapStateToProps)(AddEntry);\n"]},"metadata":{},"sourceType":"module"}